
f401_GPS_Shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004398  08004398  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043a0  080043a0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043a4  080043a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080043a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f4  20000018  080043c0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  080043c0  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b42  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016cc  00000000  00000000  00029b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002b258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000159e9  00000000  00000000  0002c498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000797f  00000000  00000000  00041e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086f91  00000000  00000000  00049800  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  000d080c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004360 	.word	0x08004360

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08004360 	.word	0x08004360

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b972 	b.w	80004e0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	4688      	mov	r8, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14b      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000222:	428a      	cmp	r2, r1
 8000224:	4615      	mov	r5, r2
 8000226:	d967      	bls.n	80002f8 <__udivmoddi4+0xe4>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0720 	rsb	r7, r2, #32
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	fa20 f707 	lsr.w	r7, r0, r7
 800023a:	4095      	lsls	r5, r2
 800023c:	ea47 0803 	orr.w	r8, r7, r3
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbb8 f7fe 	udiv	r7, r8, lr
 800024c:	fa1f fc85 	uxth.w	ip, r5
 8000250:	fb0e 8817 	mls	r8, lr, r7, r8
 8000254:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000258:	fb07 f10c 	mul.w	r1, r7, ip
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18eb      	adds	r3, r5, r3
 8000262:	f107 30ff 	add.w	r0, r7, #4294967295
 8000266:	f080 811b 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8118 	bls.w	80004a0 <__udivmoddi4+0x28c>
 8000270:	3f02      	subs	r7, #2
 8000272:	442b      	add	r3, r5
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0fe 	udiv	r0, r3, lr
 800027c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fc0c 	mul.w	ip, r0, ip
 8000288:	45a4      	cmp	ip, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	192c      	adds	r4, r5, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x290>
 8000296:	45a4      	cmp	ip, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x290>
 800029c:	3802      	subs	r0, #2
 800029e:	442c      	add	r4, r5
 80002a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a4:	eba4 040c 	sub.w	r4, r4, ip
 80002a8:	2700      	movs	r7, #0
 80002aa:	b11e      	cbz	r6, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c6 4300 	strd	r4, r3, [r6]
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xbe>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80eb 	beq.w	800049a <__udivmoddi4+0x286>
 80002c4:	2700      	movs	r7, #0
 80002c6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ca:	4638      	mov	r0, r7
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	2f00      	cmp	r7, #0
 80002d8:	d147      	bne.n	800036a <__udivmoddi4+0x156>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd0>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2c4>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa0>
 80002f2:	e9c6 4800 	strd	r4, r8, [r6]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa0>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xe8>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 808f 	bne.w	8000424 <__udivmoddi4+0x210>
 8000306:	1b49      	subs	r1, r1, r5
 8000308:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030c:	fa1f f885 	uxth.w	r8, r5
 8000310:	2701      	movs	r7, #1
 8000312:	fbb1 fcfe 	udiv	ip, r1, lr
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	fb0e 111c 	mls	r1, lr, ip, r1
 800031c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000320:	fb08 f10c 	mul.w	r1, r8, ip
 8000324:	4299      	cmp	r1, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x124>
 8000328:	18eb      	adds	r3, r5, r3
 800032a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4299      	cmp	r1, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 8000336:	4684      	mov	ip, r0
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000340:	fb0e 1410 	mls	r4, lr, r0, r1
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	45a0      	cmp	r8, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x14c>
 8000350:	192c      	adds	r4, r5, r4
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x14a>
 8000358:	45a0      	cmp	r8, r4
 800035a:	f200 80b6 	bhi.w	80004ca <__udivmoddi4+0x2b6>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 0408 	sub.w	r4, r4, r8
 8000364:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000368:	e79f      	b.n	80002aa <__udivmoddi4+0x96>
 800036a:	f1c7 0c20 	rsb	ip, r7, #32
 800036e:	40bb      	lsls	r3, r7
 8000370:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000374:	ea4e 0e03 	orr.w	lr, lr, r3
 8000378:	fa01 f407 	lsl.w	r4, r1, r7
 800037c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000380:	fa21 f30c 	lsr.w	r3, r1, ip
 8000384:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000388:	4325      	orrs	r5, r4
 800038a:	fbb3 f9f8 	udiv	r9, r3, r8
 800038e:	0c2c      	lsrs	r4, r5, #16
 8000390:	fb08 3319 	mls	r3, r8, r9, r3
 8000394:	fa1f fa8e 	uxth.w	sl, lr
 8000398:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800039c:	fb09 f40a 	mul.w	r4, r9, sl
 80003a0:	429c      	cmp	r4, r3
 80003a2:	fa02 f207 	lsl.w	r2, r2, r7
 80003a6:	fa00 f107 	lsl.w	r1, r0, r7
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1e 0303 	adds.w	r3, lr, r3
 80003b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b4:	f080 8087 	bcs.w	80004c6 <__udivmoddi4+0x2b2>
 80003b8:	429c      	cmp	r4, r3
 80003ba:	f240 8084 	bls.w	80004c6 <__udivmoddi4+0x2b2>
 80003be:	f1a9 0902 	sub.w	r9, r9, #2
 80003c2:	4473      	add	r3, lr
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	b2ad      	uxth	r5, r5
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1e 0404 	adds.w	r4, lr, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	d26b      	bcs.n	80004be <__udivmoddi4+0x2aa>
 80003e6:	45a2      	cmp	sl, r4
 80003e8:	d969      	bls.n	80004be <__udivmoddi4+0x2aa>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4474      	add	r4, lr
 80003ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f2:	fba0 8902 	umull	r8, r9, r0, r2
 80003f6:	eba4 040a 	sub.w	r4, r4, sl
 80003fa:	454c      	cmp	r4, r9
 80003fc:	46c2      	mov	sl, r8
 80003fe:	464b      	mov	r3, r9
 8000400:	d354      	bcc.n	80004ac <__udivmoddi4+0x298>
 8000402:	d051      	beq.n	80004a8 <__udivmoddi4+0x294>
 8000404:	2e00      	cmp	r6, #0
 8000406:	d069      	beq.n	80004dc <__udivmoddi4+0x2c8>
 8000408:	ebb1 050a 	subs.w	r5, r1, sl
 800040c:	eb64 0403 	sbc.w	r4, r4, r3
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40fd      	lsrs	r5, r7
 8000416:	40fc      	lsrs	r4, r7
 8000418:	ea4c 0505 	orr.w	r5, ip, r5
 800041c:	e9c6 5400 	strd	r5, r4, [r6]
 8000420:	2700      	movs	r7, #0
 8000422:	e747      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f703 	lsr.w	r7, r0, r3
 800042c:	4095      	lsls	r5, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	fa21 f303 	lsr.w	r3, r1, r3
 8000436:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043a:	4338      	orrs	r0, r7
 800043c:	0c01      	lsrs	r1, r0, #16
 800043e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000442:	fa1f f885 	uxth.w	r8, r5
 8000446:	fb0e 3317 	mls	r3, lr, r7, r3
 800044a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044e:	fb07 f308 	mul.w	r3, r7, r8
 8000452:	428b      	cmp	r3, r1
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x256>
 800045a:	1869      	adds	r1, r5, r1
 800045c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000460:	d22f      	bcs.n	80004c2 <__udivmoddi4+0x2ae>
 8000462:	428b      	cmp	r3, r1
 8000464:	d92d      	bls.n	80004c2 <__udivmoddi4+0x2ae>
 8000466:	3f02      	subs	r7, #2
 8000468:	4429      	add	r1, r5
 800046a:	1acb      	subs	r3, r1, r3
 800046c:	b281      	uxth	r1, r0
 800046e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000472:	fb0e 3310 	mls	r3, lr, r0, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb00 f308 	mul.w	r3, r0, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x27e>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f100 3cff 	add.w	ip, r0, #4294967295
 8000488:	d217      	bcs.n	80004ba <__udivmoddi4+0x2a6>
 800048a:	428b      	cmp	r3, r1
 800048c:	d915      	bls.n	80004ba <__udivmoddi4+0x2a6>
 800048e:	3802      	subs	r0, #2
 8000490:	4429      	add	r1, r5
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000498:	e73b      	b.n	8000312 <__udivmoddi4+0xfe>
 800049a:	4637      	mov	r7, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e709      	b.n	80002b4 <__udivmoddi4+0xa0>
 80004a0:	4607      	mov	r7, r0
 80004a2:	e6e7      	b.n	8000274 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a8:	4541      	cmp	r1, r8
 80004aa:	d2ab      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004ac:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b0:	eb69 020e 	sbc.w	r2, r9, lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4613      	mov	r3, r2
 80004b8:	e7a4      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004ba:	4660      	mov	r0, ip
 80004bc:	e7e9      	b.n	8000492 <__udivmoddi4+0x27e>
 80004be:	4618      	mov	r0, r3
 80004c0:	e795      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c2:	4667      	mov	r7, ip
 80004c4:	e7d1      	b.n	800046a <__udivmoddi4+0x256>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e77c      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	442c      	add	r4, r5
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0x14c>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	442b      	add	r3, r5
 80004d6:	e72f      	b.n	8000338 <__udivmoddi4+0x124>
 80004d8:	4638      	mov	r0, r7
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xda>
 80004dc:	4637      	mov	r7, r6
 80004de:	e6e9      	b.n	80002b4 <__udivmoddi4+0xa0>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ea:	f000 fc4f 	bl	8000d8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ee:	f000 f871 	bl	80005d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f2:	f000 f98b 	bl	800080c <MX_GPIO_Init>
	MX_DMA_Init();
 80004f6:	f000 f959 	bl	80007ac <MX_DMA_Init>
	MX_USART6_UART_Init();
 80004fa:	f000 f92d 	bl	8000758 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 80004fe:	f000 f901 	bl	8000704 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000502:	f000 f8d1 	bl	80006a8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	//============================== Jutiklio nuskaitymas ==============================
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADDRESS, LSM6DSL_ACC_ON_REG, 1, acc_gyr_on_values, 2, 10);  // Ijungiamas jutiklis
 8000506:	230a      	movs	r3, #10
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	2302      	movs	r3, #2
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <main+0xcc>)
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	2210      	movs	r2, #16
 8000516:	21d7      	movs	r1, #215	; 0xd7
 8000518:	4826      	ldr	r0, [pc, #152]	; (80005b4 <main+0xd0>)
 800051a:	f001 fc37 	bl	8001d8c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADDRESS, LSM6DSL_CTRL3_C, 1, reg_increment, 1, 10);  // Ijungiamas automatinis registru inkrementavimas
 800051e:	230a      	movs	r3, #10
 8000520:	9302      	str	r3, [sp, #8]
 8000522:	2301      	movs	r3, #1
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <main+0xd4>)
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	2212      	movs	r2, #18
 800052e:	21d7      	movs	r1, #215	; 0xd7
 8000530:	4820      	ldr	r0, [pc, #128]	; (80005b4 <main+0xd0>)
 8000532:	f001 fc2b 	bl	8001d8c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_ADDRESS, LSM6DSL_CTRL6_C, 1, acc_gyr_modes, 2, 10);  // Nustatomas jutiklio rezimas
 8000536:	230a      	movs	r3, #10
 8000538:	9302      	str	r3, [sp, #8]
 800053a:	2302      	movs	r3, #2
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <main+0xd8>)
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2301      	movs	r3, #1
 8000544:	2215      	movs	r2, #21
 8000546:	21d7      	movs	r1, #215	; 0xd7
 8000548:	481a      	ldr	r0, [pc, #104]	; (80005b4 <main+0xd0>)
 800054a:	f001 fc1f 	bl	8001d8c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_ADDRESS, LSM6DSL_OUTX_L_G, 1, data_acc_gyr, 12, 10);  // Nuskaitomos jutiklio reiksmes
 800054e:	230a      	movs	r3, #10
 8000550:	9302      	str	r3, [sp, #8]
 8000552:	230c      	movs	r3, #12
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <main+0xdc>)
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	2222      	movs	r2, #34	; 0x22
 800055e:	21d7      	movs	r1, #215	; 0xd7
 8000560:	4814      	ldr	r0, [pc, #80]	; (80005b4 <main+0xd0>)
 8000562:	f001 fd0d 	bl	8001f80 <HAL_I2C_Mem_Read>

	while (!g_flags.PPS);	//palaukti PPS signalo pertraukties veliaveles ir NMEA zinutes pradzios
 8000566:	bf00      	nop
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <main+0xe0>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0f8      	beq.n	8000568 <main+0x84>
	g_flags.PPS = 0;  //isvalyti PPS signalo veliavele
 8000576:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <main+0xe0>)
 8000578:	7813      	ldrb	r3, [r2, #0]
 800057a:	f36f 0300 	bfc	r3, #0, #1
 800057e:	7013      	strb	r3, [r2, #0]
	memset(g_GPS_UART_buffer, 0, sizeof g_GPS_UART_buffer); 	//Isvalyti masyva
 8000580:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000584:	2100      	movs	r1, #0
 8000586:	4810      	ldr	r0, [pc, #64]	; (80005c8 <main+0xe4>)
 8000588:	f003 fee2 	bl	8004350 <memset>
	HAL_UART_Receive(&huart1, g_GPS_UART_buffer, _GPS_UART_BUFFER_SIZE, 150); 	// Nuskaityti GPS duomenis
 800058c:	2396      	movs	r3, #150	; 0x96
 800058e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000592:	490d      	ldr	r1, [pc, #52]	; (80005c8 <main+0xe4>)
 8000594:	480d      	ldr	r0, [pc, #52]	; (80005cc <main+0xe8>)
 8000596:	f002 fefe 	bl	8003396 <HAL_UART_Receive>
	HAL_UART_Transmit_DMA(&huart6, g_GPS_UART_buffer, strlen((char*) g_GPS_UART_buffer)); 	// Issiusti gauta paketa per uart DMA
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <main+0xe4>)
 800059c:	f7ff fe1a 	bl	80001d4 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	4908      	ldr	r1, [pc, #32]	; (80005c8 <main+0xe4>)
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <main+0xec>)
 80005aa:	f002 ff9b 	bl	80034e4 <HAL_UART_Transmit_DMA>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005ae:	e7fe      	b.n	80005ae <main+0xca>
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000038 	.word	0x20000038
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000008 	.word	0x20000008
 80005c0:	2000014c 	.word	0x2000014c
 80005c4:	20000034 	.word	0x20000034
 80005c8:	20000238 	.word	0x20000238
 80005cc:	200001b8 	.word	0x200001b8
 80005d0:	200001f8 	.word	0x200001f8

080005d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 feb4 	bl	8004350 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000620:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <SystemClock_Config+0xd0>)
 8000622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800064c:	2354      	movs	r3, #84	; 0x54
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fa11 	bl	8002a84 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
		Error_Handler();
 8000668:	f000 f948 	bl	80008fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fc6b 	bl	8002f64 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xc4>
		Error_Handler();
 8000694:	f000 f932 	bl	80008fc <Error_Handler>
	}
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <MX_I2C1_Init+0x54>)
 80006b0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006b4:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_I2C1_Init+0x58>)
 80006b6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ca:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_I2C1_Init+0x50>)
 80006e6:	f001 fa19 	bl	8001b1c <HAL_I2C_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80006f0:	f000 f904 	bl	80008fc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000038 	.word	0x20000038
 80006fc:	40005400 	.word	0x40005400
 8000700:	00061a80 	.word	0x00061a80

08000704 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART1_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 230400;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000710:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000714:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800073c:	f002 fdde 	bl	80032fc <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000746:	f000 f8d9 	bl	80008fc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200001b8 	.word	0x200001b8
 8000754:	40011000 	.word	0x40011000

08000758 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART6_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_USART6_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 921600;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000764:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000768:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART6_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART6_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART6_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART6_UART_Init+0x4c>)
 8000790:	f002 fdb4 	bl	80032fc <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART6_UART_Init+0x46>
		Error_Handler();
 800079a:	f000 f8af 	bl	80008fc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200001f8 	.word	0x200001f8
 80007a8:	40011400 	.word	0x40011400

080007ac <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_DMA_Init+0x5c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_DMA_Init+0x5c>)
 80007bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_DMA_Init+0x5c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	203a      	movs	r0, #58	; 0x3a
 80007d4:	f000 fc27 	bl	8001026 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007d8:	203a      	movs	r0, #58	; 0x3a
 80007da:	f000 fc40 	bl	800105e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2045      	movs	r0, #69	; 0x45
 80007e4:	f000 fc1f 	bl	8001026 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007e8:	2045      	movs	r0, #69	; 0x45
 80007ea:	f000 fc38 	bl	800105e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2046      	movs	r0, #70	; 0x46
 80007f4:	f000 fc17 	bl	8001026 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80007f8:	2046      	movs	r0, #70	; 0x46
 80007fa:	f000 fc30 	bl	800105e <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_GPIO_Init+0xb4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <MX_GPIO_Init+0xb4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_GPIO_Init+0xb4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_GPIO_Init+0xb4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <MX_GPIO_Init+0xb4>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_GPIO_Init+0xb4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPS_WakeUp_GPIO_Port, GPS_WakeUp_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	4819      	ldr	r0, [pc, #100]	; (80008c4 <MX_GPIO_Init+0xb8>)
 8000860:	f001 f92a 	bl	8001ab8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPS_Reset_GPIO_Port, GPS_Reset_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086a:	4816      	ldr	r0, [pc, #88]	; (80008c4 <MX_GPIO_Init+0xb8>)
 800086c:	f001 f924 	bl	8001ab8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPS_WakeUp_Pin GPS_Reset_Pin */
	GPIO_InitStruct.Pin = GPS_WakeUp_Pin | GPS_Reset_Pin;
 8000870:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000874:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_GPIO_Init+0xb8>)
 800088a:	f000 ff93 	bl	80017b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000892:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_GPIO_Init+0xbc>)
 8000896:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000898:	2302      	movs	r3, #2
 800089a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <MX_GPIO_Init+0xc0>)
 80008a4:	f000 ff86 	bl	80017b4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2028      	movs	r0, #40	; 0x28
 80008ae:	f000 fbba 	bl	8001026 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b2:	2028      	movs	r0, #40	; 0x28
 80008b4:	f000 fbd3 	bl	800105e <HAL_NVIC_EnableIRQ>

}
 80008b8:	bf00      	nop
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	10110000 	.word	0x10110000
 80008cc:	40020400 	.word	0x40020400

080008d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008e0:	d104      	bne.n	80008ec <HAL_GPIO_EXTI_Callback+0x1c>
		// Isstatyti PPS signalo pertraukties veliavele
		g_flags.PPS = 1;
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x28>)
 80008e4:	7813      	ldrb	r3, [r2, #0]
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	7013      	strb	r3, [r2, #0]
	}
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	20000034 	.word	0x20000034

080008fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <HAL_I2C_MspInit+0x84>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d12c      	bne.n	80009d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <HAL_I2C_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <HAL_I2C_MspInit+0x88>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_I2C_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800099a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800099e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a0:	2312      	movs	r3, #18
 80009a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ac:	2304      	movs	r3, #4
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <HAL_I2C_MspInit+0x8c>)
 80009b8:	f000 fefc 	bl	80017b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_I2C_MspInit+0x88>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_I2C_MspInit+0x88>)
 80009c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_I2C_MspInit+0x88>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a82      	ldr	r2, [pc, #520]	; (8000c14 <HAL_UART_MspInit+0x228>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	f040 8095 	bne.w	8000b3a <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	4b80      	ldr	r3, [pc, #512]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a18:	4a7f      	ldr	r2, [pc, #508]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a20:	4b7d      	ldr	r3, [pc, #500]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a24:	f003 0310 	and.w	r3, r3, #16
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	4b79      	ldr	r3, [pc, #484]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a78      	ldr	r2, [pc, #480]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3c:	4b76      	ldr	r3, [pc, #472]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	486d      	ldr	r0, [pc, #436]	; (8000c1c <HAL_UART_MspInit+0x230>)
 8000a66:	f000 fea5 	bl	80017b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000a6a:	4b6d      	ldr	r3, [pc, #436]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000a6c:	4a6d      	ldr	r2, [pc, #436]	; (8000c24 <HAL_UART_MspInit+0x238>)
 8000a6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000a70:	4b6b      	ldr	r3, [pc, #428]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a76:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a78:	4b69      	ldr	r3, [pc, #420]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000a7a:	2240      	movs	r2, #64	; 0x40
 8000a7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7e:	4b68      	ldr	r3, [pc, #416]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a84:	4b66      	ldr	r3, [pc, #408]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a8c:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a92:	4b63      	ldr	r3, [pc, #396]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a98:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a9e:	4b60      	ldr	r3, [pc, #384]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000aa0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa6:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000aac:	485c      	ldr	r0, [pc, #368]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000aae:	f000 faf1 	bl	8001094 <HAL_DMA_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000ab8:	f7ff ff20 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a58      	ldr	r2, [pc, #352]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ac2:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <HAL_UART_MspInit+0x234>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ac8:	4b57      	ldr	r3, [pc, #348]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000aca:	4a58      	ldr	r2, [pc, #352]	; (8000c2c <HAL_UART_MspInit+0x240>)
 8000acc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ace:	4b56      	ldr	r3, [pc, #344]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000ad0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad6:	4b54      	ldr	r3, [pc, #336]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000adc:	4b52      	ldr	r3, [pc, #328]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae2:	4b51      	ldr	r3, [pc, #324]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aea:	4b4f      	ldr	r3, [pc, #316]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af0:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000af6:	4b4c      	ldr	r3, [pc, #304]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000afc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000afe:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000b00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b04:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b06:	4b48      	ldr	r3, [pc, #288]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b0c:	4846      	ldr	r0, [pc, #280]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000b0e:	f000 fac1 	bl	8001094 <HAL_DMA_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8000b18:	f7ff fef0 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a42      	ldr	r2, [pc, #264]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
 8000b22:	4a41      	ldr	r2, [pc, #260]	; (8000c28 <HAL_UART_MspInit+0x23c>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2025      	movs	r0, #37	; 0x25
 8000b2e:	f000 fa7a 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b32:	2025      	movs	r0, #37	; 0x25
 8000b34:	f000 fa93 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000b38:	e068      	b.n	8000c0c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART6)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a3c      	ldr	r2, [pc, #240]	; (8000c30 <HAL_UART_MspInit+0x244>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d163      	bne.n	8000c0c <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	4b33      	ldr	r3, [pc, #204]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4c:	4a32      	ldr	r2, [pc, #200]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000b4e:	f043 0320 	orr.w	r3, r3, #32
 8000b52:	6453      	str	r3, [r2, #68]	; 0x44
 8000b54:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a2b      	ldr	r2, [pc, #172]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_UART_MspInit+0x22c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4820      	ldr	r0, [pc, #128]	; (8000c1c <HAL_UART_MspInit+0x230>)
 8000b9a:	f000 fe0b 	bl	80017b4 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000ba0:	4a25      	ldr	r2, [pc, #148]	; (8000c38 <HAL_UART_MspInit+0x24c>)
 8000ba2:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000ba6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000baa:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bae:	2240      	movs	r2, #64	; 0x40
 8000bb0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bbe:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bd8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000be0:	4814      	ldr	r0, [pc, #80]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000be2:	f000 fa57 	bl	8001094 <HAL_DMA_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_UART_MspInit+0x204>
      Error_Handler();
 8000bec:	f7ff fe86 	bl	80008fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <HAL_UART_MspInit+0x248>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2047      	movs	r0, #71	; 0x47
 8000c02:	f000 fa10 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000c06:	2047      	movs	r0, #71	; 0x47
 8000c08:	f000 fa29 	bl	800105e <HAL_NVIC_EnableIRQ>
}
 8000c0c:	bf00      	nop
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40011000 	.word	0x40011000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	2000008c 	.word	0x2000008c
 8000c24:	400264b8 	.word	0x400264b8
 8000c28:	20000158 	.word	0x20000158
 8000c2c:	40026440 	.word	0x40026440
 8000c30:	40011400 	.word	0x40011400
 8000c34:	200000ec 	.word	0x200000ec
 8000c38:	400264a0 	.word	0x400264a0

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f8ce 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <USART1_IRQHandler+0x10>)
 8000c9e:	f002 fc8d 	bl	80035bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001b8 	.word	0x200001b8

08000cac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000cb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cb4:	f000 ff1a 	bl	8001aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <DMA2_Stream2_IRQHandler+0x10>)
 8000cc2:	f000 fb0f 	bl	80012e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000158 	.word	0x20000158

08000cd0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <DMA2_Stream6_IRQHandler+0x10>)
 8000cd6:	f000 fb05 	bl	80012e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000ec 	.word	0x200000ec

08000ce4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <DMA2_Stream7_IRQHandler+0x10>)
 8000cea:	f000 fafb 	bl	80012e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000008c 	.word	0x2000008c

08000cf8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <USART6_IRQHandler+0x10>)
 8000cfe:	f002 fc5d 	bl	80035bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200001f8 	.word	0x200001f8

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <SystemInit+0x28>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <SystemInit+0x28>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SystemInit+0x28>)
 8000d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d26:	609a      	str	r2, [r3, #8]
#endif
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x14>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e003      	b.n	8000d48 <LoopCopyDataInit>

08000d40 <CopyDataInit>:
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopFillZerobss+0x18>)
 8000d42:	585b      	ldr	r3, [r3, r1]
 8000d44:	5043      	str	r3, [r0, r1]
 8000d46:	3104      	adds	r1, #4

08000d48 <LoopCopyDataInit>:
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <LoopFillZerobss+0x1c>)
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <LoopFillZerobss+0x20>)
 8000d4c:	1842      	adds	r2, r0, r1
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3f6      	bcc.n	8000d40 <CopyDataInit>
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x24>)
 8000d54:	e002      	b.n	8000d5c <LoopFillZerobss>

08000d56 <FillZerobss>:
 8000d56:	2300      	movs	r3, #0
 8000d58:	f842 3b04 	str.w	r3, [r2], #4

08000d5c <LoopFillZerobss>:
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <LoopFillZerobss+0x28>)
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d3f9      	bcc.n	8000d56 <FillZerobss>
 8000d62:	f7ff ffd3 	bl	8000d0c <SystemInit>
 8000d66:	f003 facf 	bl	8004308 <__libc_init_array>
 8000d6a:	f7ff fbbb 	bl	80004e4 <main>
 8000d6e:	4770      	bx	lr
 8000d70:	20018000 	.word	0x20018000
 8000d74:	080043a8 	.word	0x080043a8
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000018 	.word	0x20000018
 8000d80:	20000018 	.word	0x20000018
 8000d84:	20000a0c 	.word	0x20000a0c

08000d88 <ADC_IRQHandler>:
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f92b 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fda4 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f943 	bl	800107a <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f90b 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000000c 	.word	0x2000000c
 8000e28:	20000014 	.word	0x20000014
 8000e2c:	20000010 	.word	0x20000010

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000014 	.word	0x20000014
 8000e54:	20000a08 	.word	0x20000a08

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000a08 	.word	0x20000a08

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff29 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff3e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff31 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff feda 	bl	8000e58 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e099      	b.n	80011e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d0:	e00f      	b.n	80010f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010d2:	f7ff fec1 	bl	8000e58 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d908      	bls.n	80010f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2220      	movs	r2, #32
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e078      	b.n	80011e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e8      	bne.n	80010d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <HAL_DMA_Init+0x158>)
 800110c:	4013      	ands	r3, r2
 800110e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800111e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800112a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	2b04      	cmp	r3, #4
 800114a:	d107      	bne.n	800115c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4313      	orrs	r3, r2
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4313      	orrs	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f023 0307 	bic.w	r3, r3, #7
 8001172:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	4313      	orrs	r3, r2
 800117c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	2b04      	cmp	r3, #4
 8001184:	d117      	bne.n	80011b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4313      	orrs	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00e      	beq.n	80011b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 fa91 	bl	80016c0 <DMA_CheckFifoParam>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011b2:	2301      	movs	r3, #1
 80011b4:	e016      	b.n	80011e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fa48 	bl	8001654 <DMA_CalcBaseAndBitshift>
 80011c4:	4603      	mov	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	223f      	movs	r2, #63	; 0x3f
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	f010803f 	.word	0xf010803f

080011f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800120e:	2b01      	cmp	r3, #1
 8001210:	d101      	bne.n	8001216 <HAL_DMA_Start_IT+0x26>
 8001212:	2302      	movs	r3, #2
 8001214:	e040      	b.n	8001298 <HAL_DMA_Start_IT+0xa8>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d12f      	bne.n	800128a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2202      	movs	r2, #2
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 f9da 	bl	80015f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	223f      	movs	r2, #63	; 0x3f
 800124a:	409a      	lsls	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0216 	orr.w	r2, r2, #22
 800125e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0208 	orr.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0201 	orr.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e005      	b.n	8001296 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001292:	2302      	movs	r3, #2
 8001294:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001296:	7dfb      	ldrb	r3, [r7, #23]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d004      	beq.n	80012be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2280      	movs	r2, #128	; 0x80
 80012b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00c      	b.n	80012d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2205      	movs	r2, #5
 80012c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012f0:	4b92      	ldr	r3, [pc, #584]	; (800153c <HAL_DMA_IRQHandler+0x258>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a92      	ldr	r2, [pc, #584]	; (8001540 <HAL_DMA_IRQHandler+0x25c>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0a9b      	lsrs	r3, r3, #10
 80012fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130e:	2208      	movs	r2, #8
 8001310:	409a      	lsls	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01a      	beq.n	8001350 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0204 	bic.w	r2, r2, #4
 8001336:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133c:	2208      	movs	r2, #8
 800133e:	409a      	lsls	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001348:	f043 0201 	orr.w	r2, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001354:	2201      	movs	r2, #1
 8001356:	409a      	lsls	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d012      	beq.n	8001386 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001372:	2201      	movs	r2, #1
 8001374:	409a      	lsls	r2, r3
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f043 0202 	orr.w	r2, r3, #2
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	2204      	movs	r2, #4
 800138c:	409a      	lsls	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d012      	beq.n	80013bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	2204      	movs	r2, #4
 80013aa:	409a      	lsls	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b4:	f043 0204 	orr.w	r2, r3, #4
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	2210      	movs	r2, #16
 80013c2:	409a      	lsls	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d043      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d03c      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	2210      	movs	r2, #16
 80013e0:	409a      	lsls	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d018      	beq.n	8001426 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d108      	bne.n	8001414 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d024      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4798      	blx	r3
 8001412:	e01f      	b.n	8001454 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01b      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4798      	blx	r3
 8001424:	e016      	b.n	8001454 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d107      	bne.n	8001444 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0208 	bic.w	r2, r2, #8
 8001442:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2220      	movs	r2, #32
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 808e 	beq.w	8001582 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8086 	beq.w	8001582 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147a:	2220      	movs	r2, #32
 800147c:	409a      	lsls	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b05      	cmp	r3, #5
 800148c:	d136      	bne.n	80014fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0216 	bic.w	r2, r2, #22
 800149c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <HAL_DMA_IRQHandler+0x1da>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0208 	bic.w	r2, r2, #8
 80014cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d2:	223f      	movs	r2, #63	; 0x3f
 80014d4:	409a      	lsls	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d07d      	beq.n	80015ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	4798      	blx	r3
        }
        return;
 80014fa:	e078      	b.n	80015ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d01c      	beq.n	8001544 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d108      	bne.n	800152a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	2b00      	cmp	r3, #0
 800151e:	d030      	beq.n	8001582 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
 8001528:	e02b      	b.n	8001582 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152e:	2b00      	cmp	r3, #0
 8001530:	d027      	beq.n	8001582 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	4798      	blx	r3
 800153a:	e022      	b.n	8001582 <HAL_DMA_IRQHandler+0x29e>
 800153c:	2000000c 	.word	0x2000000c
 8001540:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10f      	bne.n	8001572 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0210 	bic.w	r2, r2, #16
 8001560:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	2b00      	cmp	r3, #0
 8001588:	d032      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d022      	beq.n	80015dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2205      	movs	r2, #5
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d307      	bcc.n	80015ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f2      	bne.n	80015ae <HAL_DMA_IRQHandler+0x2ca>
 80015c8:	e000      	b.n	80015cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80015ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	4798      	blx	r3
 80015ec:	e000      	b.n	80015f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80015ee:	bf00      	nop
    }
  }
}
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop

080015f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001614:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b40      	cmp	r3, #64	; 0x40
 8001624:	d108      	bne.n	8001638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001636:	e007      	b.n	8001648 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	60da      	str	r2, [r3, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	3b10      	subs	r3, #16
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <DMA_CalcBaseAndBitshift+0x68>)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d909      	bls.n	8001696 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	1d1a      	adds	r2, r3, #4
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	659a      	str	r2, [r3, #88]	; 0x58
 8001694:	e007      	b.n	80016a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	aaaaaaab 	.word	0xaaaaaaab
 80016bc:	08004390 	.word	0x08004390

080016c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11f      	bne.n	800171a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d855      	bhi.n	800178c <DMA_CheckFifoParam+0xcc>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <DMA_CheckFifoParam+0x28>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	0800170b 	.word	0x0800170b
 80016f0:	080016f9 	.word	0x080016f9
 80016f4:	0800178d 	.word	0x0800178d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d045      	beq.n	8001790 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001708:	e042      	b.n	8001790 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001712:	d13f      	bne.n	8001794 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001718:	e03c      	b.n	8001794 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001722:	d121      	bne.n	8001768 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d836      	bhi.n	8001798 <DMA_CheckFifoParam+0xd8>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <DMA_CheckFifoParam+0x70>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001741 	.word	0x08001741
 8001734:	08001747 	.word	0x08001747
 8001738:	08001741 	.word	0x08001741
 800173c:	08001759 	.word	0x08001759
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      break;
 8001744:	e02f      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d024      	beq.n	800179c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001756:	e021      	b.n	800179c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001760:	d11e      	bne.n	80017a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001766:	e01b      	b.n	80017a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d902      	bls.n	8001774 <DMA_CheckFifoParam+0xb4>
 800176e:	2b03      	cmp	r3, #3
 8001770:	d003      	beq.n	800177a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001772:	e018      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
      break;
 8001778:	e015      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00e      	beq.n	80017a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
      break;
 800178a:	e00b      	b.n	80017a4 <DMA_CheckFifoParam+0xe4>
      break;
 800178c:	bf00      	nop
 800178e:	e00a      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      break;
 8001790:	bf00      	nop
 8001792:	e008      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      break;
 8001794:	bf00      	nop
 8001796:	e006      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      break;
 8001798:	bf00      	nop
 800179a:	e004      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      break;
 800179c:	bf00      	nop
 800179e:	e002      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80017a0:	bf00      	nop
 80017a2:	e000      	b.n	80017a6 <DMA_CheckFifoParam+0xe6>
      break;
 80017a4:	bf00      	nop
    }
  } 
  
  return status; 
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e159      	b.n	8001a84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 8148 	bne.w	8001a7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d00b      	beq.n	800180e <HAL_GPIO_Init+0x5a>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001802:	2b11      	cmp	r3, #17
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b12      	cmp	r3, #18
 800180c:	d130      	bne.n	8001870 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0xfc>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a2 	beq.w	8001a7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <HAL_GPIO_Init+0x2e4>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a55      	ldr	r2, [pc, #340]	; (8001a98 <HAL_GPIO_Init+0x2e4>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_GPIO_Init+0x2e4>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a51      	ldr	r2, [pc, #324]	; (8001a9c <HAL_GPIO_Init+0x2e8>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_GPIO_Init+0x2ec>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d019      	beq.n	80019b6 <HAL_GPIO_Init+0x202>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a47      	ldr	r2, [pc, #284]	; (8001aa4 <HAL_GPIO_Init+0x2f0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_GPIO_Init+0x1fe>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a46      	ldr	r2, [pc, #280]	; (8001aa8 <HAL_GPIO_Init+0x2f4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00d      	beq.n	80019ae <HAL_GPIO_Init+0x1fa>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a45      	ldr	r2, [pc, #276]	; (8001aac <HAL_GPIO_Init+0x2f8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d007      	beq.n	80019aa <HAL_GPIO_Init+0x1f6>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a44      	ldr	r2, [pc, #272]	; (8001ab0 <HAL_GPIO_Init+0x2fc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_GPIO_Init+0x1f2>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e008      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019a6:	2307      	movs	r3, #7
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x204>
 80019b6:	2300      	movs	r3, #0
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f002 0203 	and.w	r2, r2, #3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c8:	4934      	ldr	r1, [pc, #208]	; (8001a9c <HAL_GPIO_Init+0x2e8>)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019fa:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a00:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a24:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4e:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a78:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <HAL_GPIO_Init+0x300>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	f67f aea2 	bls.w	80017d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3724      	adds	r7, #36	; 0x24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fee0 	bl	80008d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40013c00 	.word	0x40013c00

08001b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e11f      	b.n	8001d6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe ff0a 	bl	800095c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	; 0x24
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b80:	f001 fb94 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8001b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a7b      	ldr	r2, [pc, #492]	; (8001d78 <HAL_I2C_Init+0x25c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d807      	bhi.n	8001ba0 <HAL_I2C_Init+0x84>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a7a      	ldr	r2, [pc, #488]	; (8001d7c <HAL_I2C_Init+0x260>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	e006      	b.n	8001bae <HAL_I2C_Init+0x92>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a77      	ldr	r2, [pc, #476]	; (8001d80 <HAL_I2C_Init+0x264>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0db      	b.n	8001d6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4a72      	ldr	r2, [pc, #456]	; (8001d84 <HAL_I2C_Init+0x268>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0c9b      	lsrs	r3, r3, #18
 8001bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a64      	ldr	r2, [pc, #400]	; (8001d78 <HAL_I2C_Init+0x25c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d802      	bhi.n	8001bf0 <HAL_I2C_Init+0xd4>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3301      	adds	r3, #1
 8001bee:	e009      	b.n	8001c04 <HAL_I2C_Init+0xe8>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	4a63      	ldr	r2, [pc, #396]	; (8001d88 <HAL_I2C_Init+0x26c>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	3301      	adds	r3, #1
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4956      	ldr	r1, [pc, #344]	; (8001d78 <HAL_I2C_Init+0x25c>)
 8001c20:	428b      	cmp	r3, r1
 8001c22:	d80d      	bhi.n	8001c40 <HAL_I2C_Init+0x124>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e59      	subs	r1, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	bf38      	it	cc
 8001c3c:	2304      	movcc	r3, #4
 8001c3e:	e04f      	b.n	8001ce0 <HAL_I2C_Init+0x1c4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d111      	bne.n	8001c6c <HAL_I2C_Init+0x150>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1e58      	subs	r0, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	440b      	add	r3, r1
 8001c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	e012      	b.n	8001c92 <HAL_I2C_Init+0x176>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e58      	subs	r0, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	0099      	lsls	r1, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Init+0x17e>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e022      	b.n	8001ce0 <HAL_I2C_Init+0x1c4>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_I2C_Init+0x1a4>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1e58      	subs	r0, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	440b      	add	r3, r1
 8001cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cbe:	e00f      	b.n	8001ce0 <HAL_I2C_Init+0x1c4>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1e58      	subs	r0, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	0099      	lsls	r1, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	6809      	ldr	r1, [r1, #0]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6911      	ldr	r1, [r2, #16]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68d2      	ldr	r2, [r2, #12]
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	000186a0 	.word	0x000186a0
 8001d7c:	001e847f 	.word	0x001e847f
 8001d80:	003d08ff 	.word	0x003d08ff
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	10624dd3 	.word	0x10624dd3

08001d8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	817b      	strh	r3, [r7, #10]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	813b      	strh	r3, [r7, #8]
 8001da2:	4613      	mov	r3, r2
 8001da4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001da6:	f7ff f857 	bl	8000e58 <HAL_GetTick>
 8001daa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	f040 80d9 	bne.w	8001f6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2319      	movs	r3, #25
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	496d      	ldr	r1, [pc, #436]	; (8001f78 <HAL_I2C_Mem_Write+0x1ec>)
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fc7f 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e0cc      	b.n	8001f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_I2C_Mem_Write+0x56>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e0c5      	b.n	8001f6e <HAL_I2C_Mem_Write+0x1e2>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d007      	beq.n	8001e08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2221      	movs	r2, #33	; 0x21
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a3a      	ldr	r2, [r7, #32]
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a4d      	ldr	r2, [pc, #308]	; (8001f7c <HAL_I2C_Mem_Write+0x1f0>)
 8001e48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e4a:	88f8      	ldrh	r0, [r7, #6]
 8001e4c:	893a      	ldrh	r2, [r7, #8]
 8001e4e:	8979      	ldrh	r1, [r7, #10]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 fab6 	bl	80023cc <I2C_RequestMemoryWrite>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d052      	beq.n	8001f0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e081      	b.n	8001f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fd00 	bl	8002874 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00d      	beq.n	8001e96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d107      	bne.n	8001e92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06b      	b.n	8001f6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d11b      	bne.n	8001f0c <HAL_I2C_Mem_Write+0x180>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d017      	beq.n	8001f0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1aa      	bne.n	8001e6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 fcec 	bl	80028f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d107      	bne.n	8001f3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e016      	b.n	8001f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	00100002 	.word	0x00100002
 8001f7c:	ffff0000 	.word	0xffff0000

08001f80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	4608      	mov	r0, r1
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	817b      	strh	r3, [r7, #10]
 8001f92:	460b      	mov	r3, r1
 8001f94:	813b      	strh	r3, [r7, #8]
 8001f96:	4613      	mov	r3, r2
 8001f98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f9a:	f7fe ff5d 	bl	8000e58 <HAL_GetTick>
 8001f9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	f040 8208 	bne.w	80023be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2319      	movs	r3, #25
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	497b      	ldr	r1, [pc, #492]	; (80021a4 <HAL_I2C_Mem_Read+0x224>)
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 fb85 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e1fb      	b.n	80023c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2C_Mem_Read+0x56>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e1f4      	b.n	80023c0 <HAL_I2C_Mem_Read+0x440>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d007      	beq.n	8001ffc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2222      	movs	r2, #34	; 0x22
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2240      	movs	r2, #64	; 0x40
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800202c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a5b      	ldr	r2, [pc, #364]	; (80021a8 <HAL_I2C_Mem_Read+0x228>)
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800203e:	88f8      	ldrh	r0, [r7, #6]
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	8979      	ldrh	r1, [r7, #10]
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4603      	mov	r3, r0
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fa52 	bl	80024f8 <I2C_RequestMemoryRead>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e1b0      	b.n	80023c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	d113      	bne.n	800208e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	623b      	str	r3, [r7, #32]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	623b      	str	r3, [r7, #32]
 800207a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e184      	b.n	8002398 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002092:	2b01      	cmp	r3, #1
 8002094:	d11b      	bne.n	80020ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e164      	b.n	8002398 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d11b      	bne.n	800210e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	e144      	b.n	8002398 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002124:	e138      	b.n	8002398 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	2b03      	cmp	r3, #3
 800212c:	f200 80f1 	bhi.w	8002312 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	2b01      	cmp	r3, #1
 8002136:	d123      	bne.n	8002180 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fc1b 	bl	8002978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e139      	b.n	80023c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800217e:	e10b      	b.n	8002398 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	2b02      	cmp	r3, #2
 8002186:	d14e      	bne.n	8002226 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218e:	2200      	movs	r2, #0
 8002190:	4906      	ldr	r1, [pc, #24]	; (80021ac <HAL_I2C_Mem_Read+0x22c>)
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fa98 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e10e      	b.n	80023c0 <HAL_I2C_Mem_Read+0x440>
 80021a2:	bf00      	nop
 80021a4:	00100002 	.word	0x00100002
 80021a8:	ffff0000 	.word	0xffff0000
 80021ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002224:	e0b8      	b.n	8002398 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222c:	2200      	movs	r2, #0
 800222e:	4966      	ldr	r1, [pc, #408]	; (80023c8 <HAL_I2C_Mem_Read+0x448>)
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fa49 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0bf      	b.n	80023c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800224e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	2200      	movs	r2, #0
 800228a:	494f      	ldr	r1, [pc, #316]	; (80023c8 <HAL_I2C_Mem_Read+0x448>)
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fa1b 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e091      	b.n	80023c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002310:	e042      	b.n	8002398 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fb2e 	bl	8002978 <I2C_WaitOnRXNEFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e04c      	b.n	80023c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b04      	cmp	r3, #4
 8002364:	d118      	bne.n	8002398 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	f47f aec2 	bne.w	8002126 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	00010004 	.word	0x00010004

080023cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	817b      	strh	r3, [r7, #10]
 80023de:	460b      	mov	r3, r1
 80023e0:	813b      	strh	r3, [r7, #8]
 80023e2:	4613      	mov	r3, r2
 80023e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f960 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241c:	d103      	bne.n	8002426 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e05f      	b.n	80024ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800242a:	897b      	ldrh	r3, [r7, #10]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002438:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	6a3a      	ldr	r2, [r7, #32]
 800243e:	492d      	ldr	r1, [pc, #180]	; (80024f4 <I2C_RequestMemoryWrite+0x128>)
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f998 	bl	8002776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e04c      	b.n	80024ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	6a39      	ldr	r1, [r7, #32]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fa02 	bl	8002874 <I2C_WaitOnTXEFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00d      	beq.n	8002492 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2b04      	cmp	r3, #4
 800247c:	d107      	bne.n	800248e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e02b      	b.n	80024ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002498:	893b      	ldrh	r3, [r7, #8]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	611a      	str	r2, [r3, #16]
 80024a2:	e021      	b.n	80024e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024a4:	893b      	ldrh	r3, [r7, #8]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b4:	6a39      	ldr	r1, [r7, #32]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f9dc 	bl	8002874 <I2C_WaitOnTXEFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d107      	bne.n	80024da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e005      	b.n	80024ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024de:	893b      	ldrh	r3, [r7, #8]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	00010002 	.word	0x00010002

080024f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	461a      	mov	r2, r3
 8002506:	4603      	mov	r3, r0
 8002508:	817b      	strh	r3, [r7, #10]
 800250a:	460b      	mov	r3, r1
 800250c:	813b      	strh	r3, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002520:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002530:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	2200      	movs	r2, #0
 800253a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f8c2 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00d      	beq.n	8002566 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002558:	d103      	bne.n	8002562 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0aa      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002566:	897b      	ldrh	r3, [r7, #10]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002574:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	6a3a      	ldr	r2, [r7, #32]
 800257a:	4952      	ldr	r1, [pc, #328]	; (80026c4 <I2C_RequestMemoryRead+0x1cc>)
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f8fa 	bl	8002776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e097      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	6a39      	ldr	r1, [r7, #32]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f964 	bl	8002874 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d107      	bne.n	80025ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e076      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025d4:	893b      	ldrh	r3, [r7, #8]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	e021      	b.n	8002624 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025e0:	893b      	ldrh	r3, [r7, #8]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	6a39      	ldr	r1, [r7, #32]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f93e 	bl	8002874 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b04      	cmp	r3, #4
 8002604:	d107      	bne.n	8002616 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002614:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e050      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800261a:	893b      	ldrh	r3, [r7, #8]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	6a39      	ldr	r1, [r7, #32]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f923 	bl	8002874 <I2C_WaitOnTXEFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2b04      	cmp	r3, #4
 800263a:	d107      	bne.n	800264c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e035      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2200      	movs	r2, #0
 8002668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f82b 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00d      	beq.n	8002694 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002686:	d103      	bne.n	8002690 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e013      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002694:	897b      	ldrh	r3, [r7, #10]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	6a3a      	ldr	r2, [r7, #32]
 80026a8:	4906      	ldr	r1, [pc, #24]	; (80026c4 <I2C_RequestMemoryRead+0x1cc>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f863 	bl	8002776 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	00010002 	.word	0x00010002

080026c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d8:	e025      	b.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d021      	beq.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7fe fbb9 	bl	8000e58 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d116      	bne.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f043 0220 	orr.w	r2, r3, #32
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e023      	b.n	800276e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d10d      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4013      	ands	r3, r2
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	e00c      	b.n	8002766 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4013      	ands	r3, r2
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	429a      	cmp	r2, r3
 800276a:	d0b6      	beq.n	80026da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002784:	e051      	b.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002794:	d123      	bne.n	80027de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f043 0204 	orr.w	r2, r3, #4
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e046      	b.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d021      	beq.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e6:	f7fe fb37 	bl	8000e58 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d302      	bcc.n	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e020      	b.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10c      	bne.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	e00b      	b.n	8002866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	43da      	mvns	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4013      	ands	r3, r2
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d18d      	bne.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002880:	e02d      	b.n	80028de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f8ce 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e02d      	b.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d021      	beq.n	80028de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289a:	f7fe fadd 	bl	8000e58 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d302      	bcc.n	80028b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d116      	bne.n	80028de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f043 0220 	orr.w	r2, r3, #32
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e007      	b.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e8:	2b80      	cmp	r3, #128	; 0x80
 80028ea:	d1ca      	bne.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002902:	e02d      	b.n	8002960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f88d 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e02d      	b.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d021      	beq.n	8002960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291c:	f7fe fa9c 	bl	8000e58 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e007      	b.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b04      	cmp	r3, #4
 800296c:	d1ca      	bne.n	8002904 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002984:	e042      	b.n	8002a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b10      	cmp	r3, #16
 8002992:	d119      	bne.n	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0210 	mvn.w	r2, #16
 800299c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e029      	b.n	8002a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c8:	f7fe fa46 	bl	8000e58 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d302      	bcc.n	80029de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d116      	bne.n	8002a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d1b5      	bne.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3a:	d11b      	bne.n	8002a74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f043 0204 	orr.w	r2, r3, #4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e25b      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d075      	beq.n	8002b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aa2:	4ba3      	ldr	r3, [pc, #652]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d00c      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aae:	4ba0      	ldr	r3, [pc, #640]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d112      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aba:	4b9d      	ldr	r3, [pc, #628]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	4b99      	ldr	r3, [pc, #612]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d05b      	beq.n	8002b8c <HAL_RCC_OscConfig+0x108>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d157      	bne.n	8002b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e236      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_OscConfig+0x74>
 8002aea:	4b91      	ldr	r3, [pc, #580]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a90      	ldr	r2, [pc, #576]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01d      	b.n	8002b34 <HAL_RCC_OscConfig+0xb0>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002b02:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a8a      	ldr	r2, [pc, #552]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a87      	ldr	r2, [pc, #540]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0xb0>
 8002b1c:	4b84      	ldr	r3, [pc, #528]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a83      	ldr	r2, [pc, #524]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a80      	ldr	r2, [pc, #512]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe f98c 	bl	8000e58 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fe f988 	bl	8000e58 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e1fb      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b76      	ldr	r3, [pc, #472]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0xc0>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe f978 	bl	8000e58 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fe f974 	bl	8000e58 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1e7      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	4b6c      	ldr	r3, [pc, #432]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0xe8>
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d063      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b9a:	4b65      	ldr	r3, [pc, #404]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba6:	4b62      	ldr	r3, [pc, #392]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d11c      	bne.n	8002bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bb2:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	4b5c      	ldr	r3, [pc, #368]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x152>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1bb      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b56      	ldr	r3, [pc, #344]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4952      	ldr	r1, [pc, #328]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	e03a      	b.n	8002c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <HAL_RCC_OscConfig+0x2b0>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7fe f92d 	bl	8000e58 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe f929 	bl	8000e58 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e19c      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4940      	ldr	r1, [pc, #256]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b3f      	ldr	r3, [pc, #252]	; (8002d34 <HAL_RCC_OscConfig+0x2b0>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe f90c 	bl	8000e58 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe f908 	bl	8000e58 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e17b      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d030      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d016      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_RCC_OscConfig+0x2b4>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe f8ec 	bl	8000e58 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe f8e8 	bl	8000e58 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e15b      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x200>
 8002ca2:	e015      	b.n	8002cd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca4:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <HAL_RCC_OscConfig+0x2b4>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002caa:	f7fe f8d5 	bl	8000e58 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb2:	f7fe f8d1 	bl	8000e58 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e144      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a0 	beq.w	8002e1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_OscConfig+0x2b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d121      	bne.n	8002d5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_RCC_OscConfig+0x2b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <HAL_RCC_OscConfig+0x2b8>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d26:	f7fe f897 	bl	8000e58 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	e011      	b.n	8002d52 <HAL_RCC_OscConfig+0x2ce>
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	42470000 	.word	0x42470000
 8002d38:	42470e80 	.word	0x42470e80
 8002d3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe f88a 	bl	8000e58 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0fd      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d52:	4b81      	ldr	r3, [pc, #516]	; (8002f58 <HAL_RCC_OscConfig+0x4d4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d106      	bne.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
 8002d66:	4b7d      	ldr	r3, [pc, #500]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a7c      	ldr	r2, [pc, #496]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
 8002d72:	e01c      	b.n	8002dae <HAL_RCC_OscConfig+0x32a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d10c      	bne.n	8002d96 <HAL_RCC_OscConfig+0x312>
 8002d7c:	4b77      	ldr	r3, [pc, #476]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	4a76      	ldr	r2, [pc, #472]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70
 8002d88:	4b74      	ldr	r3, [pc, #464]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a73      	ldr	r2, [pc, #460]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
 8002d94:	e00b      	b.n	8002dae <HAL_RCC_OscConfig+0x32a>
 8002d96:	4b71      	ldr	r3, [pc, #452]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	4a70      	ldr	r2, [pc, #448]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
 8002da2:	4b6e      	ldr	r3, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	4a6d      	ldr	r2, [pc, #436]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fe f84f 	bl	8000e58 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe f84b 	bl	8000e58 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0bc      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ee      	beq.n	8002dbe <HAL_RCC_OscConfig+0x33a>
 8002de0:	e014      	b.n	8002e0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fe f839 	bl	8000e58 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe f835 	bl	8000e58 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0a6      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ee      	bne.n	8002dea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d105      	bne.n	8002e1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b52      	ldr	r3, [pc, #328]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a51      	ldr	r2, [pc, #324]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8092 	beq.w	8002f4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e28:	4b4c      	ldr	r3, [pc, #304]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d05c      	beq.n	8002eee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d141      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b48      	ldr	r3, [pc, #288]	; (8002f60 <HAL_RCC_OscConfig+0x4dc>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe f809 	bl	8000e58 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe f805 	bl	8000e58 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e078      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5c:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	019b      	lsls	r3, r3, #6
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	3b01      	subs	r3, #1
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	4933      	ldr	r1, [pc, #204]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <HAL_RCC_OscConfig+0x4dc>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fd ffde 	bl	8000e58 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fd ffda 	bl	8000e58 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e04d      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb2:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
 8002ebe:	e045      	b.n	8002f4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_OscConfig+0x4dc>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7fd ffc7 	bl	8000e58 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fd ffc3 	bl	8000e58 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e036      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x44a>
 8002eec:	e02e      	b.n	8002f4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e029      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_RCC_OscConfig+0x4d8>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d11c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d115      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f22:	4013      	ands	r3, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10d      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d106      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40007000 	.word	0x40007000
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	42470060 	.word	0x42470060

08002f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0cc      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b68      	ldr	r3, [pc, #416]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d90c      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b65      	ldr	r3, [pc, #404]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b63      	ldr	r3, [pc, #396]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0b8      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb8:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	494d      	ldr	r1, [pc, #308]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d044      	beq.n	8003084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d119      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e07f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d003      	beq.n	8003022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800301e:	2b03      	cmp	r3, #3
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e06f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e067      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b37      	ldr	r3, [pc, #220]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4934      	ldr	r1, [pc, #208]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003054:	f7fd ff00 	bl	8000e58 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fd fefc 	bl	8000e58 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e04f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d20c      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b22      	ldr	r3, [pc, #136]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e032      	b.n	8003112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4916      	ldr	r1, [pc, #88]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	490e      	ldr	r1, [pc, #56]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ea:	f000 f821 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030ee:	4601      	mov	r1, r0
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	5cd3      	ldrb	r3, [r2, r3]
 80030fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fe60 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023c00 	.word	0x40023c00
 8003120:	40023800 	.word	0x40023800
 8003124:	08004378 	.word	0x08004378
 8003128:	2000000c 	.word	0x2000000c
 800312c:	20000010 	.word	0x20000010

08003130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	2300      	movs	r3, #0
 8003140:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003146:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_RCC_GetSysClockFreq+0x158>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b04      	cmp	r3, #4
 8003150:	d007      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x32>
 8003152:	2b08      	cmp	r3, #8
 8003154:	d008      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x38>
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 808d 	bne.w	8003276 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_RCC_GetSysClockFreq+0x15c>)
 800315e:	60bb      	str	r3, [r7, #8]
       break;
 8003160:	e08c      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003162:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_RCC_GetSysClockFreq+0x160>)
 8003164:	60bb      	str	r3, [r7, #8]
      break;
 8003166:	e089      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003168:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_RCC_GetSysClockFreq+0x158>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003170:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003172:	4b45      	ldr	r3, [pc, #276]	; (8003288 <HAL_RCC_GetSysClockFreq+0x158>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d023      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b42      	ldr	r3, [pc, #264]	; (8003288 <HAL_RCC_GetSysClockFreq+0x158>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	f04f 0400 	mov.w	r4, #0
 8003188:	f240 11ff 	movw	r1, #511	; 0x1ff
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	ea03 0501 	and.w	r5, r3, r1
 8003194:	ea04 0602 	and.w	r6, r4, r2
 8003198:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <HAL_RCC_GetSysClockFreq+0x160>)
 800319a:	fb02 f106 	mul.w	r1, r2, r6
 800319e:	2200      	movs	r2, #0
 80031a0:	fb02 f205 	mul.w	r2, r2, r5
 80031a4:	440a      	add	r2, r1
 80031a6:	493a      	ldr	r1, [pc, #232]	; (8003290 <HAL_RCC_GetSysClockFreq+0x160>)
 80031a8:	fba5 0101 	umull	r0, r1, r5, r1
 80031ac:	1853      	adds	r3, r2, r1
 80031ae:	4619      	mov	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f04f 0400 	mov.w	r4, #0
 80031b6:	461a      	mov	r2, r3
 80031b8:	4623      	mov	r3, r4
 80031ba:	f7fd f813 	bl	80001e4 <__aeabi_uldivmod>
 80031be:	4603      	mov	r3, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e049      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c6:	4b30      	ldr	r3, [pc, #192]	; (8003288 <HAL_RCC_GetSysClockFreq+0x158>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	f04f 0400 	mov.w	r4, #0
 80031d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	ea03 0501 	and.w	r5, r3, r1
 80031dc:	ea04 0602 	and.w	r6, r4, r2
 80031e0:	4629      	mov	r1, r5
 80031e2:	4632      	mov	r2, r6
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f04f 0400 	mov.w	r4, #0
 80031ec:	0154      	lsls	r4, r2, #5
 80031ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031f2:	014b      	lsls	r3, r1, #5
 80031f4:	4619      	mov	r1, r3
 80031f6:	4622      	mov	r2, r4
 80031f8:	1b49      	subs	r1, r1, r5
 80031fa:	eb62 0206 	sbc.w	r2, r2, r6
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	f04f 0400 	mov.w	r4, #0
 8003206:	0194      	lsls	r4, r2, #6
 8003208:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800320c:	018b      	lsls	r3, r1, #6
 800320e:	1a5b      	subs	r3, r3, r1
 8003210:	eb64 0402 	sbc.w	r4, r4, r2
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	00e2      	lsls	r2, r4, #3
 800321e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003222:	00d9      	lsls	r1, r3, #3
 8003224:	460b      	mov	r3, r1
 8003226:	4614      	mov	r4, r2
 8003228:	195b      	adds	r3, r3, r5
 800322a:	eb44 0406 	adc.w	r4, r4, r6
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	02a2      	lsls	r2, r4, #10
 8003238:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800323c:	0299      	lsls	r1, r3, #10
 800323e:	460b      	mov	r3, r1
 8003240:	4614      	mov	r4, r2
 8003242:	4618      	mov	r0, r3
 8003244:	4621      	mov	r1, r4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f04f 0400 	mov.w	r4, #0
 800324c:	461a      	mov	r2, r3
 800324e:	4623      	mov	r3, r4
 8003250:	f7fc ffc8 	bl	80001e4 <__aeabi_uldivmod>
 8003254:	4603      	mov	r3, r0
 8003256:	460c      	mov	r4, r1
 8003258:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_GetSysClockFreq+0x158>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	3301      	adds	r3, #1
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	60bb      	str	r3, [r7, #8]
      break;
 8003274:	e002      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003278:	60bb      	str	r3, [r7, #8]
      break;
 800327a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327c:	68bb      	ldr	r3, [r7, #8]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	00f42400 	.word	0x00f42400
 8003290:	017d7840 	.word	0x017d7840

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000000c 	.word	0x2000000c

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4601      	mov	r1, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a9b      	lsrs	r3, r3, #10
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08004388 	.word	0x08004388

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffdc 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032dc:	4601      	mov	r1, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0b5b      	lsrs	r3, r3, #13
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4a03      	ldr	r2, [pc, #12]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08004388 	.word	0x08004388

080032fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e03f      	b.n	800338e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fd fb62 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2224      	movs	r2, #36	; 0x24
 800332c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800333e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fc65 	bl	8003c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b088      	sub	sp, #32
 800339a:	af02      	add	r7, sp, #8
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	f040 8090 	bne.w	80034d8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <HAL_UART_Receive+0x2e>
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e088      	b.n	80034da <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Receive+0x40>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e081      	b.n	80034da <HAL_UART_Receive+0x144>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2222      	movs	r2, #34	; 0x22
 80033e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033ec:	f7fd fd34 	bl	8000e58 <HAL_GetTick>
 80033f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	88fa      	ldrh	r2, [r7, #6]
 80033f6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	88fa      	ldrh	r2, [r7, #6]
 80033fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003406:	e05c      	b.n	80034c2 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	d12b      	bne.n	8003478 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2200      	movs	r2, #0
 8003428:	2120      	movs	r1, #32
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fa6f 	bl	800390e <UART_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e04f      	b.n	80034da <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	b29a      	uxth	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3302      	adds	r3, #2
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	e030      	b.n	80034c2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	b29b      	uxth	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	b29a      	uxth	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	3301      	adds	r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	e024      	b.n	80034c2 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2200      	movs	r2, #0
 8003480:	2120      	movs	r1, #32
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fa43 	bl	800390e <UART_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e023      	b.n	80034da <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d108      	bne.n	80034ac <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	60ba      	str	r2, [r7, #8]
 80034a6:	b2ca      	uxtb	r2, r1
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e00a      	b.n	80034c2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	1c59      	adds	r1, r3, #1
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d19d      	bne.n	8003408 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e000      	b.n	80034da <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
  }
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d153      	bne.n	80035a6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_UART_Transmit_DMA+0x26>
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e04c      	b.n	80035a8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_UART_Transmit_DMA+0x38>
 8003518:	2302      	movs	r3, #2
 800351a:	e045      	b.n	80035a8 <HAL_UART_Transmit_DMA+0xc4>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2221      	movs	r2, #33	; 0x21
 8003540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_UART_Transmit_DMA+0xcc>)
 800354a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <HAL_UART_Transmit_DMA+0xd0>)
 8003552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <HAL_UART_Transmit_DMA+0xd4>)
 800355a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	2200      	movs	r2, #0
 8003562:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003564:	f107 0308 	add.w	r3, r7, #8
 8003568:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3304      	adds	r3, #4
 8003578:	461a      	mov	r2, r3
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f7fd fe38 	bl	80011f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003588:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035a0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	0800380d 	.word	0x0800380d
 80035b4:	0800385f 	.word	0x0800385f
 80035b8:	0800387b 	.word	0x0800387b

080035bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_UART_IRQHandler+0x52>
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fa81 	bl	8003b0e <UART_Receive_IT>
      return;
 800360c:	e0d1      	b.n	80037b2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80b0 	beq.w	8003776 <HAL_UART_IRQHandler+0x1ba>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <HAL_UART_IRQHandler+0x70>
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80a5 	beq.w	8003776 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_UART_IRQHandler+0x90>
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_UART_IRQHandler+0xb0>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003664:	f043 0202 	orr.w	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_UART_IRQHandler+0xd0>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00f      	beq.n	80036b6 <HAL_UART_IRQHandler+0xfa>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <HAL_UART_IRQHandler+0xee>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	f043 0208 	orr.w	r2, r3, #8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d078      	beq.n	80037b0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <HAL_UART_IRQHandler+0x11c>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa1b 	bl	8003b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_UART_IRQHandler+0x144>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d031      	beq.n	8003764 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f964 	bl	80039ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d123      	bne.n	800375c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003722:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_UART_IRQHandler+0x1fc>)
 8003732:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	4618      	mov	r0, r3
 800373a:	f7fd fdb1 	bl	80012a0 <HAL_DMA_Abort_IT>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d016      	beq.n	8003772 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800374e:	4610      	mov	r0, r2
 8003750:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003752:	e00e      	b.n	8003772 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f84f 	bl	80037f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375a:	e00a      	b.n	8003772 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f84b 	bl	80037f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003762:	e006      	b.n	8003772 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f847 	bl	80037f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003770:	e01e      	b.n	80037b0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003772:	bf00      	nop
    return;
 8003774:	e01c      	b.n	80037b0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_UART_IRQHandler+0x1d6>
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f951 	bl	8003a32 <UART_Transmit_IT>
    return;
 8003790:	e00f      	b.n	80037b2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1f6>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f999 	bl	8003ade <UART_EndTransmit_IT>
    return;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80037b0:	bf00      	nop
  }
}
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	08003a0b 	.word	0x08003a0b

080037bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d113      	bne.n	8003850 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800383c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800384e:	e002      	b.n	8003856 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff ffb3 	bl	80037bc <HAL_UART_TxCpltCallback>
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff ffaf 	bl	80037d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b80      	cmp	r3, #128	; 0x80
 8003898:	bf0c      	ite	eq
 800389a:	2301      	moveq	r3, #1
 800389c:	2300      	movne	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b21      	cmp	r3, #33	; 0x21
 80038ac:	d108      	bne.n	80038c0 <UART_DMAError+0x46>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2200      	movs	r2, #0
 80038b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80038ba:	68b8      	ldr	r0, [r7, #8]
 80038bc:	f000 f871 	bl	80039a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b22      	cmp	r3, #34	; 0x22
 80038e0:	d108      	bne.n	80038f4 <UART_DMAError+0x7a>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2200      	movs	r2, #0
 80038ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80038ee:	68b8      	ldr	r0, [r7, #8]
 80038f0:	f000 f86d 	bl	80039ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	f043 0210 	orr.w	r2, r3, #16
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003900:	68b8      	ldr	r0, [r7, #8]
 8003902:	f7ff ff79 	bl	80037f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391e:	e02c      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	d028      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0x30>
 800392e:	f7fd fa93 	bl	8000e58 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	429a      	cmp	r2, r3
 800393c:	d21d      	bcs.n	800397a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800394c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	429a      	cmp	r2, r3
 8003996:	d0c3      	beq.n	8003920 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80039b8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7ff fee7 	bl	80037f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b085      	sub	sp, #20
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b21      	cmp	r3, #33	; 0x21
 8003a44:	d144      	bne.n	8003ad0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	d11a      	bne.n	8003a86 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a64:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	1c9a      	adds	r2, r3, #2
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	621a      	str	r2, [r3, #32]
 8003a78:	e00e      	b.n	8003a98 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	621a      	str	r2, [r3, #32]
 8003a84:	e008      	b.n	8003a98 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6211      	str	r1, [r2, #32]
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10f      	bne.n	8003acc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fe5c 	bl	80037bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b22      	cmp	r3, #34	; 0x22
 8003b20:	d171      	bne.n	8003c06 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2a:	d123      	bne.n	8003b74 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10e      	bne.n	8003b58 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	1c9a      	adds	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
 8003b56:	e029      	b.n	8003bac <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28
 8003b72:	e01b      	b.n	8003bac <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6858      	ldr	r0, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6291      	str	r1, [r2, #40]	; 0x28
 8003b8c:	b2c2      	uxtb	r2, r0
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e00c      	b.n	8003bac <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	1c58      	adds	r0, r3, #1
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	6288      	str	r0, [r1, #40]	; 0x28
 8003ba4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d120      	bne.n	8003c02 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0220 	bic.w	r2, r2, #32
 8003bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fdf3 	bl	80037e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e002      	b.n	8003c08 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c52:	f023 030c 	bic.w	r3, r3, #12
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7e:	f040 818b 	bne.w	8003f98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4ac1      	ldr	r2, [pc, #772]	; (8003f8c <UART_SetConfig+0x37c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d005      	beq.n	8003c98 <UART_SetConfig+0x88>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4abf      	ldr	r2, [pc, #764]	; (8003f90 <UART_SetConfig+0x380>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	f040 80bd 	bne.w	8003e12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c98:	f7ff fb1c 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8003c9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	f04f 0600 	mov.w	r6, #0
 8003ca6:	46a8      	mov	r8, r5
 8003ca8:	46b1      	mov	r9, r6
 8003caa:	eb18 0308 	adds.w	r3, r8, r8
 8003cae:	eb49 0409 	adc.w	r4, r9, r9
 8003cb2:	4698      	mov	r8, r3
 8003cb4:	46a1      	mov	r9, r4
 8003cb6:	eb18 0805 	adds.w	r8, r8, r5
 8003cba:	eb49 0906 	adc.w	r9, r9, r6
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cd2:	4688      	mov	r8, r1
 8003cd4:	4691      	mov	r9, r2
 8003cd6:	eb18 0005 	adds.w	r0, r8, r5
 8003cda:	eb49 0106 	adc.w	r1, r9, r6
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	461d      	mov	r5, r3
 8003ce4:	f04f 0600 	mov.w	r6, #0
 8003ce8:	196b      	adds	r3, r5, r5
 8003cea:	eb46 0406 	adc.w	r4, r6, r6
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	f7fc fa77 	bl	80001e4 <__aeabi_uldivmod>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4ba5      	ldr	r3, [pc, #660]	; (8003f94 <UART_SetConfig+0x384>)
 8003cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	461d      	mov	r5, r3
 8003d0c:	f04f 0600 	mov.w	r6, #0
 8003d10:	46a9      	mov	r9, r5
 8003d12:	46b2      	mov	sl, r6
 8003d14:	eb19 0309 	adds.w	r3, r9, r9
 8003d18:	eb4a 040a 	adc.w	r4, sl, sl
 8003d1c:	4699      	mov	r9, r3
 8003d1e:	46a2      	mov	sl, r4
 8003d20:	eb19 0905 	adds.w	r9, r9, r5
 8003d24:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d3c:	4689      	mov	r9, r1
 8003d3e:	4692      	mov	sl, r2
 8003d40:	eb19 0005 	adds.w	r0, r9, r5
 8003d44:	eb4a 0106 	adc.w	r1, sl, r6
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	f04f 0600 	mov.w	r6, #0
 8003d52:	196b      	adds	r3, r5, r5
 8003d54:	eb46 0406 	adc.w	r4, r6, r6
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	f7fc fa42 	bl	80001e4 <__aeabi_uldivmod>
 8003d60:	4603      	mov	r3, r0
 8003d62:	460c      	mov	r4, r1
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b8b      	ldr	r3, [pc, #556]	; (8003f94 <UART_SetConfig+0x384>)
 8003d68:	fba3 1302 	umull	r1, r3, r3, r2
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	2164      	movs	r1, #100	; 0x64
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	3332      	adds	r3, #50	; 0x32
 8003d7a:	4a86      	ldr	r2, [pc, #536]	; (8003f94 <UART_SetConfig+0x384>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d88:	4498      	add	r8, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	461d      	mov	r5, r3
 8003d8e:	f04f 0600 	mov.w	r6, #0
 8003d92:	46a9      	mov	r9, r5
 8003d94:	46b2      	mov	sl, r6
 8003d96:	eb19 0309 	adds.w	r3, r9, r9
 8003d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d9e:	4699      	mov	r9, r3
 8003da0:	46a2      	mov	sl, r4
 8003da2:	eb19 0905 	adds.w	r9, r9, r5
 8003da6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dbe:	4689      	mov	r9, r1
 8003dc0:	4692      	mov	sl, r2
 8003dc2:	eb19 0005 	adds.w	r0, r9, r5
 8003dc6:	eb4a 0106 	adc.w	r1, sl, r6
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	461d      	mov	r5, r3
 8003dd0:	f04f 0600 	mov.w	r6, #0
 8003dd4:	196b      	adds	r3, r5, r5
 8003dd6:	eb46 0406 	adc.w	r4, r6, r6
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	f7fc fa01 	bl	80001e4 <__aeabi_uldivmod>
 8003de2:	4603      	mov	r3, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <UART_SetConfig+0x384>)
 8003dea:	fba3 1302 	umull	r1, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2164      	movs	r1, #100	; 0x64
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	3332      	adds	r3, #50	; 0x32
 8003dfc:	4a65      	ldr	r2, [pc, #404]	; (8003f94 <UART_SetConfig+0x384>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	f003 0207 	and.w	r2, r3, #7
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4442      	add	r2, r8
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	e26f      	b.n	80042f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e12:	f7ff fa4b 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8003e16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	f04f 0600 	mov.w	r6, #0
 8003e20:	46a8      	mov	r8, r5
 8003e22:	46b1      	mov	r9, r6
 8003e24:	eb18 0308 	adds.w	r3, r8, r8
 8003e28:	eb49 0409 	adc.w	r4, r9, r9
 8003e2c:	4698      	mov	r8, r3
 8003e2e:	46a1      	mov	r9, r4
 8003e30:	eb18 0805 	adds.w	r8, r8, r5
 8003e34:	eb49 0906 	adc.w	r9, r9, r6
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e4c:	4688      	mov	r8, r1
 8003e4e:	4691      	mov	r9, r2
 8003e50:	eb18 0005 	adds.w	r0, r8, r5
 8003e54:	eb49 0106 	adc.w	r1, r9, r6
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	461d      	mov	r5, r3
 8003e5e:	f04f 0600 	mov.w	r6, #0
 8003e62:	196b      	adds	r3, r5, r5
 8003e64:	eb46 0406 	adc.w	r4, r6, r6
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	f7fc f9ba 	bl	80001e4 <__aeabi_uldivmod>
 8003e70:	4603      	mov	r3, r0
 8003e72:	460c      	mov	r4, r1
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <UART_SetConfig+0x384>)
 8003e78:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	461d      	mov	r5, r3
 8003e86:	f04f 0600 	mov.w	r6, #0
 8003e8a:	46a9      	mov	r9, r5
 8003e8c:	46b2      	mov	sl, r6
 8003e8e:	eb19 0309 	adds.w	r3, r9, r9
 8003e92:	eb4a 040a 	adc.w	r4, sl, sl
 8003e96:	4699      	mov	r9, r3
 8003e98:	46a2      	mov	sl, r4
 8003e9a:	eb19 0905 	adds.w	r9, r9, r5
 8003e9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ea2:	f04f 0100 	mov.w	r1, #0
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eb6:	4689      	mov	r9, r1
 8003eb8:	4692      	mov	sl, r2
 8003eba:	eb19 0005 	adds.w	r0, r9, r5
 8003ebe:	eb4a 0106 	adc.w	r1, sl, r6
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	461d      	mov	r5, r3
 8003ec8:	f04f 0600 	mov.w	r6, #0
 8003ecc:	196b      	adds	r3, r5, r5
 8003ece:	eb46 0406 	adc.w	r4, r6, r6
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4623      	mov	r3, r4
 8003ed6:	f7fc f985 	bl	80001e4 <__aeabi_uldivmod>
 8003eda:	4603      	mov	r3, r0
 8003edc:	460c      	mov	r4, r1
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b2c      	ldr	r3, [pc, #176]	; (8003f94 <UART_SetConfig+0x384>)
 8003ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2164      	movs	r1, #100	; 0x64
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	3332      	adds	r3, #50	; 0x32
 8003ef4:	4a27      	ldr	r2, [pc, #156]	; (8003f94 <UART_SetConfig+0x384>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f02:	4498      	add	r8, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	461d      	mov	r5, r3
 8003f08:	f04f 0600 	mov.w	r6, #0
 8003f0c:	46a9      	mov	r9, r5
 8003f0e:	46b2      	mov	sl, r6
 8003f10:	eb19 0309 	adds.w	r3, r9, r9
 8003f14:	eb4a 040a 	adc.w	r4, sl, sl
 8003f18:	4699      	mov	r9, r3
 8003f1a:	46a2      	mov	sl, r4
 8003f1c:	eb19 0905 	adds.w	r9, r9, r5
 8003f20:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f38:	4689      	mov	r9, r1
 8003f3a:	4692      	mov	sl, r2
 8003f3c:	eb19 0005 	adds.w	r0, r9, r5
 8003f40:	eb4a 0106 	adc.w	r1, sl, r6
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	461d      	mov	r5, r3
 8003f4a:	f04f 0600 	mov.w	r6, #0
 8003f4e:	196b      	adds	r3, r5, r5
 8003f50:	eb46 0406 	adc.w	r4, r6, r6
 8003f54:	461a      	mov	r2, r3
 8003f56:	4623      	mov	r3, r4
 8003f58:	f7fc f944 	bl	80001e4 <__aeabi_uldivmod>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <UART_SetConfig+0x384>)
 8003f64:	fba3 1302 	umull	r1, r3, r3, r2
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	2164      	movs	r1, #100	; 0x64
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	3332      	adds	r3, #50	; 0x32
 8003f76:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <UART_SetConfig+0x384>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	f003 0207 	and.w	r2, r3, #7
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4442      	add	r2, r8
 8003f88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f8a:	e1b2      	b.n	80042f2 <UART_SetConfig+0x6e2>
 8003f8c:	40011000 	.word	0x40011000
 8003f90:	40011400 	.word	0x40011400
 8003f94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4ad7      	ldr	r2, [pc, #860]	; (80042fc <UART_SetConfig+0x6ec>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d005      	beq.n	8003fae <UART_SetConfig+0x39e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4ad6      	ldr	r2, [pc, #856]	; (8004300 <UART_SetConfig+0x6f0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	f040 80d1 	bne.w	8004150 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fae:	f7ff f991 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 8003fb2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	469a      	mov	sl, r3
 8003fb8:	f04f 0b00 	mov.w	fp, #0
 8003fbc:	46d0      	mov	r8, sl
 8003fbe:	46d9      	mov	r9, fp
 8003fc0:	eb18 0308 	adds.w	r3, r8, r8
 8003fc4:	eb49 0409 	adc.w	r4, r9, r9
 8003fc8:	4698      	mov	r8, r3
 8003fca:	46a1      	mov	r9, r4
 8003fcc:	eb18 080a 	adds.w	r8, r8, sl
 8003fd0:	eb49 090b 	adc.w	r9, r9, fp
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fe0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fe4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fe8:	4688      	mov	r8, r1
 8003fea:	4691      	mov	r9, r2
 8003fec:	eb1a 0508 	adds.w	r5, sl, r8
 8003ff0:	eb4b 0609 	adc.w	r6, fp, r9
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	f04f 0400 	mov.w	r4, #0
 8004006:	0094      	lsls	r4, r2, #2
 8004008:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800400c:	008b      	lsls	r3, r1, #2
 800400e:	461a      	mov	r2, r3
 8004010:	4623      	mov	r3, r4
 8004012:	4628      	mov	r0, r5
 8004014:	4631      	mov	r1, r6
 8004016:	f7fc f8e5 	bl	80001e4 <__aeabi_uldivmod>
 800401a:	4603      	mov	r3, r0
 800401c:	460c      	mov	r4, r1
 800401e:	461a      	mov	r2, r3
 8004020:	4bb8      	ldr	r3, [pc, #736]	; (8004304 <UART_SetConfig+0x6f4>)
 8004022:	fba3 2302 	umull	r2, r3, r3, r2
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	469b      	mov	fp, r3
 8004030:	f04f 0c00 	mov.w	ip, #0
 8004034:	46d9      	mov	r9, fp
 8004036:	46e2      	mov	sl, ip
 8004038:	eb19 0309 	adds.w	r3, r9, r9
 800403c:	eb4a 040a 	adc.w	r4, sl, sl
 8004040:	4699      	mov	r9, r3
 8004042:	46a2      	mov	sl, r4
 8004044:	eb19 090b 	adds.w	r9, r9, fp
 8004048:	eb4a 0a0c 	adc.w	sl, sl, ip
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004058:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004060:	4689      	mov	r9, r1
 8004062:	4692      	mov	sl, r2
 8004064:	eb1b 0509 	adds.w	r5, fp, r9
 8004068:	eb4c 060a 	adc.w	r6, ip, sl
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4619      	mov	r1, r3
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	f04f 0400 	mov.w	r4, #0
 800407e:	0094      	lsls	r4, r2, #2
 8004080:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004084:	008b      	lsls	r3, r1, #2
 8004086:	461a      	mov	r2, r3
 8004088:	4623      	mov	r3, r4
 800408a:	4628      	mov	r0, r5
 800408c:	4631      	mov	r1, r6
 800408e:	f7fc f8a9 	bl	80001e4 <__aeabi_uldivmod>
 8004092:	4603      	mov	r3, r0
 8004094:	460c      	mov	r4, r1
 8004096:	461a      	mov	r2, r3
 8004098:	4b9a      	ldr	r3, [pc, #616]	; (8004304 <UART_SetConfig+0x6f4>)
 800409a:	fba3 1302 	umull	r1, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2164      	movs	r1, #100	; 0x64
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	3332      	adds	r3, #50	; 0x32
 80040ac:	4a95      	ldr	r2, [pc, #596]	; (8004304 <UART_SetConfig+0x6f4>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b8:	4498      	add	r8, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	469b      	mov	fp, r3
 80040be:	f04f 0c00 	mov.w	ip, #0
 80040c2:	46d9      	mov	r9, fp
 80040c4:	46e2      	mov	sl, ip
 80040c6:	eb19 0309 	adds.w	r3, r9, r9
 80040ca:	eb4a 040a 	adc.w	r4, sl, sl
 80040ce:	4699      	mov	r9, r3
 80040d0:	46a2      	mov	sl, r4
 80040d2:	eb19 090b 	adds.w	r9, r9, fp
 80040d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040da:	f04f 0100 	mov.w	r1, #0
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040ee:	4689      	mov	r9, r1
 80040f0:	4692      	mov	sl, r2
 80040f2:	eb1b 0509 	adds.w	r5, fp, r9
 80040f6:	eb4c 060a 	adc.w	r6, ip, sl
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4619      	mov	r1, r3
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	f04f 0400 	mov.w	r4, #0
 800410c:	0094      	lsls	r4, r2, #2
 800410e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004112:	008b      	lsls	r3, r1, #2
 8004114:	461a      	mov	r2, r3
 8004116:	4623      	mov	r3, r4
 8004118:	4628      	mov	r0, r5
 800411a:	4631      	mov	r1, r6
 800411c:	f7fc f862 	bl	80001e4 <__aeabi_uldivmod>
 8004120:	4603      	mov	r3, r0
 8004122:	460c      	mov	r4, r1
 8004124:	461a      	mov	r2, r3
 8004126:	4b77      	ldr	r3, [pc, #476]	; (8004304 <UART_SetConfig+0x6f4>)
 8004128:	fba3 1302 	umull	r1, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	2164      	movs	r1, #100	; 0x64
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	3332      	adds	r3, #50	; 0x32
 800413a:	4a72      	ldr	r2, [pc, #456]	; (8004304 <UART_SetConfig+0x6f4>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	f003 020f 	and.w	r2, r3, #15
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4442      	add	r2, r8
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	e0d0      	b.n	80042f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7ff f8ac 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004154:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	469a      	mov	sl, r3
 800415a:	f04f 0b00 	mov.w	fp, #0
 800415e:	46d0      	mov	r8, sl
 8004160:	46d9      	mov	r9, fp
 8004162:	eb18 0308 	adds.w	r3, r8, r8
 8004166:	eb49 0409 	adc.w	r4, r9, r9
 800416a:	4698      	mov	r8, r3
 800416c:	46a1      	mov	r9, r4
 800416e:	eb18 080a 	adds.w	r8, r8, sl
 8004172:	eb49 090b 	adc.w	r9, r9, fp
 8004176:	f04f 0100 	mov.w	r1, #0
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004182:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004186:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800418a:	4688      	mov	r8, r1
 800418c:	4691      	mov	r9, r2
 800418e:	eb1a 0508 	adds.w	r5, sl, r8
 8004192:	eb4b 0609 	adc.w	r6, fp, r9
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4619      	mov	r1, r3
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	f04f 0400 	mov.w	r4, #0
 80041a8:	0094      	lsls	r4, r2, #2
 80041aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041ae:	008b      	lsls	r3, r1, #2
 80041b0:	461a      	mov	r2, r3
 80041b2:	4623      	mov	r3, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	4631      	mov	r1, r6
 80041b8:	f7fc f814 	bl	80001e4 <__aeabi_uldivmod>
 80041bc:	4603      	mov	r3, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	461a      	mov	r2, r3
 80041c2:	4b50      	ldr	r3, [pc, #320]	; (8004304 <UART_SetConfig+0x6f4>)
 80041c4:	fba3 2302 	umull	r2, r3, r3, r2
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	469b      	mov	fp, r3
 80041d2:	f04f 0c00 	mov.w	ip, #0
 80041d6:	46d9      	mov	r9, fp
 80041d8:	46e2      	mov	sl, ip
 80041da:	eb19 0309 	adds.w	r3, r9, r9
 80041de:	eb4a 040a 	adc.w	r4, sl, sl
 80041e2:	4699      	mov	r9, r3
 80041e4:	46a2      	mov	sl, r4
 80041e6:	eb19 090b 	adds.w	r9, r9, fp
 80041ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041ee:	f04f 0100 	mov.w	r1, #0
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004202:	4689      	mov	r9, r1
 8004204:	4692      	mov	sl, r2
 8004206:	eb1b 0509 	adds.w	r5, fp, r9
 800420a:	eb4c 060a 	adc.w	r6, ip, sl
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4619      	mov	r1, r3
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	f04f 0400 	mov.w	r4, #0
 8004220:	0094      	lsls	r4, r2, #2
 8004222:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004226:	008b      	lsls	r3, r1, #2
 8004228:	461a      	mov	r2, r3
 800422a:	4623      	mov	r3, r4
 800422c:	4628      	mov	r0, r5
 800422e:	4631      	mov	r1, r6
 8004230:	f7fb ffd8 	bl	80001e4 <__aeabi_uldivmod>
 8004234:	4603      	mov	r3, r0
 8004236:	460c      	mov	r4, r1
 8004238:	461a      	mov	r2, r3
 800423a:	4b32      	ldr	r3, [pc, #200]	; (8004304 <UART_SetConfig+0x6f4>)
 800423c:	fba3 1302 	umull	r1, r3, r3, r2
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	2164      	movs	r1, #100	; 0x64
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	3332      	adds	r3, #50	; 0x32
 800424e:	4a2d      	ldr	r2, [pc, #180]	; (8004304 <UART_SetConfig+0x6f4>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800425a:	4498      	add	r8, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	469b      	mov	fp, r3
 8004260:	f04f 0c00 	mov.w	ip, #0
 8004264:	46d9      	mov	r9, fp
 8004266:	46e2      	mov	sl, ip
 8004268:	eb19 0309 	adds.w	r3, r9, r9
 800426c:	eb4a 040a 	adc.w	r4, sl, sl
 8004270:	4699      	mov	r9, r3
 8004272:	46a2      	mov	sl, r4
 8004274:	eb19 090b 	adds.w	r9, r9, fp
 8004278:	eb4a 0a0c 	adc.w	sl, sl, ip
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004288:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800428c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004290:	4689      	mov	r9, r1
 8004292:	4692      	mov	sl, r2
 8004294:	eb1b 0509 	adds.w	r5, fp, r9
 8004298:	eb4c 060a 	adc.w	r6, ip, sl
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4619      	mov	r1, r3
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	f04f 0400 	mov.w	r4, #0
 80042ae:	0094      	lsls	r4, r2, #2
 80042b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042b4:	008b      	lsls	r3, r1, #2
 80042b6:	461a      	mov	r2, r3
 80042b8:	4623      	mov	r3, r4
 80042ba:	4628      	mov	r0, r5
 80042bc:	4631      	mov	r1, r6
 80042be:	f7fb ff91 	bl	80001e4 <__aeabi_uldivmod>
 80042c2:	4603      	mov	r3, r0
 80042c4:	460c      	mov	r4, r1
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <UART_SetConfig+0x6f4>)
 80042ca:	fba3 1302 	umull	r1, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2164      	movs	r1, #100	; 0x64
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	3332      	adds	r3, #50	; 0x32
 80042dc:	4a09      	ldr	r2, [pc, #36]	; (8004304 <UART_SetConfig+0x6f4>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	f003 020f 	and.w	r2, r3, #15
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4442      	add	r2, r8
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	e7ff      	b.n	80042f2 <UART_SetConfig+0x6e2>
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fc:	40011000 	.word	0x40011000
 8004300:	40011400 	.word	0x40011400
 8004304:	51eb851f 	.word	0x51eb851f

08004308 <__libc_init_array>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	4e0d      	ldr	r6, [pc, #52]	; (8004340 <__libc_init_array+0x38>)
 800430c:	4c0d      	ldr	r4, [pc, #52]	; (8004344 <__libc_init_array+0x3c>)
 800430e:	1ba4      	subs	r4, r4, r6
 8004310:	10a4      	asrs	r4, r4, #2
 8004312:	2500      	movs	r5, #0
 8004314:	42a5      	cmp	r5, r4
 8004316:	d109      	bne.n	800432c <__libc_init_array+0x24>
 8004318:	4e0b      	ldr	r6, [pc, #44]	; (8004348 <__libc_init_array+0x40>)
 800431a:	4c0c      	ldr	r4, [pc, #48]	; (800434c <__libc_init_array+0x44>)
 800431c:	f000 f820 	bl	8004360 <_init>
 8004320:	1ba4      	subs	r4, r4, r6
 8004322:	10a4      	asrs	r4, r4, #2
 8004324:	2500      	movs	r5, #0
 8004326:	42a5      	cmp	r5, r4
 8004328:	d105      	bne.n	8004336 <__libc_init_array+0x2e>
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004330:	4798      	blx	r3
 8004332:	3501      	adds	r5, #1
 8004334:	e7ee      	b.n	8004314 <__libc_init_array+0xc>
 8004336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800433a:	4798      	blx	r3
 800433c:	3501      	adds	r5, #1
 800433e:	e7f2      	b.n	8004326 <__libc_init_array+0x1e>
 8004340:	080043a0 	.word	0x080043a0
 8004344:	080043a0 	.word	0x080043a0
 8004348:	080043a0 	.word	0x080043a0
 800434c:	080043a4 	.word	0x080043a4

08004350 <memset>:
 8004350:	4402      	add	r2, r0
 8004352:	4603      	mov	r3, r0
 8004354:	4293      	cmp	r3, r2
 8004356:	d100      	bne.n	800435a <memset+0xa>
 8004358:	4770      	bx	lr
 800435a:	f803 1b01 	strb.w	r1, [r3], #1
 800435e:	e7f9      	b.n	8004354 <memset+0x4>

08004360 <_init>:
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004362:	bf00      	nop
 8004364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004366:	bc08      	pop	{r3}
 8004368:	469e      	mov	lr, r3
 800436a:	4770      	bx	lr

0800436c <_fini>:
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	bf00      	nop
 8004370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004372:	bc08      	pop	{r3}
 8004374:	469e      	mov	lr, r3
 8004376:	4770      	bx	lr
